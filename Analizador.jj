PARSER_BEGIN(Analizador)
	import java.io.*;
	import java.lang.*;
	import java.util.*;
	import javax.swing.*;

	public class Analizador{
		static int error = 0;
		static int linea = 1;
		static String errores = "";
		
		public static void main(String args[]) throws ParseException {
			FileWriter fichero = null;
			PrintWriter printWriter = null;

			 try{
				Analizador analizador = new Analizador(System.in);
				analizador.Programa();

				if (error <= 0) {
					System.out.println("**Compilaci\u00F3n \u00C9xitosa**");
				} else {
					fichero = new FileWriter("./salida.txt");
					printWriter = new PrintWriter(fichero);

					printWriter.println("*N\u00FAmero de Errores: " + error + "*");
					printWriter.println(errores);
				}
			} catch(ParseException e){
				System.out.println(e.getMessage());
				System.out.println("Analizador: se han encontrado errores en el analisis");
			} finally {
				try {
					if (null != fichero) {
						fichero.close();
					} 
				} catch (Exception ex) {
					ex.printStackTrace();
				}
			}
		}
	}
PARSER_END(Analizador)

/**PALABRAS RESERVADAS*/
TOKEN:  {
	<NEW:  "new ">
	|<LET: "let">
	|<VAR: "var">
	|<CONSTRUCTOR: "constructor">
	|<THIS: "this">	
	|<CONSOLELOG: "console.log">
	|<TRY: "try">
	|<CATCH: "catch">
	|<FINALLY: "finally">
	|<THROW: "throw">
	|<FUNCTION: "function">
	|<SET: "set">
	|<GET: "get">
}

/**	POO */
TOKEN:  {
	<CLASS:  "class">
	|<EXTENDS: "extends">
	|<INTERFACE: "interface">
	|<IMPLEMENTS: "implements">
}

/** MODIFICADORES DE ACCESO */
TOKEN: {
	<PUBLIC: "public">
	|<PRIVATE: "private">
	|<PROTECTED: "protected">
}

TOKEN: /**ESTRUCTURAS CICLICAS Y CONDICIONALES*/
{
	<IF:  "if">
	|<ELSE:  "else">
	|<FOR:  "for">
	|<FOREACH:  "foreach">
	|<DO:  "do">
	|<WHILE:  "while">
	|<CONTINUE: "continue">
	|<SWITCH:  "switch">
	|<CASE:  "case">
	|<BREAK:  "break">
	|<DEFAUL:  "default">
}

/**TIPOS DE DATOS*/
TOKEN:
{
	<BOOLEAN: "boolean">
	|<ENTERO:  "number">
	|<STRING: "string">
	|<ANY: "any">
	|<VOID: "void">
	|<ARRAY: "Array">
	|<UNDEFINED: "undefined">
	|<NULL: "null">
	|<ENUM: "enum">
	|<OBJECT: "object">
}

/**OPERADORES LOGICOS Y ARITMETICOS*/
TOKEN:
{
	<SUMA:  "+">
	|<RESTA:  "-">
	|<MULTIPLIC:  "*">
	|<DIVIS:  "/">
	|<MODULO:  "%">
	|<AND:  "&&">
	|<OR:  "||">
	|<INCREMENTAR:  "++">
	|<DECREMENTAR:  "--">
}

/**DELIMITADORES Y OPERADORES COMPARATIVOS*/
TOKEN:
{
	<PARENT_IZQ:  "(">
	|<PARENT_DER:  ")">
	|<LLAVE_IZQ:  "{">
	|<LLAVE_DER:  "}">
	|<CORCH_IZQ:  "[">
	|<CORCH_DER:  "]">
	|<PUNTO_COMA:  ";">
	|<DOS_PUNTOS:  ":">
	|<PUNTO:  ".">
	|<COMA:  ",">
	|<ASIGNACION:  "=">
	|<IGUAL:  "==">
	|<MAYOR:  ">">
	|<MENOR:  "<">
	|<MAYOR_IGUAL:  ">=">
	|<MENOR_IGUAL:  "<=">
	|<DIF_QUE:  "!=">
}

/**NUMEROS Y CADENAS*/
TOKEN:
{
   <NUMERO: (["0"-"9"])+ >
   |<NUMERO_DECIMAL: (["0"-"9"])+ "." (["0"-"9"])* >
   |<COMILLAS: "\"" >
   |<IDENTIFICADOR: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"] | ("\u00e1") | ("\u00e9") | ("\u00ed") | ("\u00f3") | ("\u00fa") 
   |("\u00c1") | ("\u00c9") | ("\u00cd") | ("\u00d3") | ("\u00da"))* >
   |<CADENA: <COMILLAS> ["a"-"z","A"-"Z","0"-"9"," "]((["a"-"z","A"-"Z","0"-"9"," ",":",";",".","ñ"])|("¿")|("?")|("#")|("+")|("-")|("*")|("~")|("%")|("=")|("{")|("}")|("/")|("!")|("¡")|
   ("<")|(">")|("\u00e1")|("\u00e9")|("\u00ed")|("\u00f3")|("\u00fa")|("\u00c1")|("\u00c9")|("\u00cd")|("\u00d3")|("\u00da"))*<COMILLAS> >
   |<CARACTER :<COMILLAS>["a"-"z","A"-"Z","0"-"9"]<COMILLAS>>
   |<BOOLEANO : "true" | "false">
   
}

/*TABLA DE ERRORES LEXICOS*/
TOKEN:
{													  
	<ERROR: ("&"|"%"|"¡"|"!"|"¬"|"#"|"$"|"%"|"?"|"¿"|"^")> {System.out.println(" " );}
}

/**ERRORES QUE SALTA DEL ANÁLISIS LÉXICO*/
SKIP:
{
	" " | "\r" | "\t" | "\n"
}