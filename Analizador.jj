PARSER_BEGIN(Analizador)
	import java.io.*;
	import java.lang.*;
	import java.util.*;

	public class Analizador{
		static int cantidadErrores = 0;
		static int linea = 1;
		static String mensajesError = "";
		static PrintWriter lexico;
		static PrintWriter sintactico;
		
		public static void main(String args[]) 
			throws ParseException, FileNotFoundException, UnsupportedEncodingException {
		
			try{
				Analizador analizador = new Analizador(System.in);
				lexico = new PrintWriter("lexico.txt","UTF-8");
				analizador.lexico.println("PAR ORDENADO\n[TIPO---->VALOR]\n");

				sintactico = new PrintWriter("sintactico.txt","UTF-8");

				analizador.programa();
				lexico.close();

				if (cantidadErrores > 0) {
					analizador.sintactico.println("*NUMERO DE ERRORES: " + cantidadErrores + "*");
					analizador.sintactico.println(mensajesError);
					sintactico.close();					
				} else {
					analizador.lexico.println("**COMPILACION EXITOSA**");
				}
			} catch(ParseException ex){
				lexico.println(ex.getMessage() + "SE HAN ENCONTRADO ERRORES EN EL PROGRAMA");
			}
		}
	}
PARSER_END(Analizador)

/**PALABRAS RESERVADAS*/
TOKEN:  {
	<NEW:  "new "> {Analizador.lexico.println("PALABRA RESERVADA ----> " + image);}
	| <LET: "let"> {Analizador.lexico.println("PALABRA RESERVADA ----> " + image);}
	| <VAR: "var"> {Analizador.lexico.println("PALABRA RESERVADA ----> " + image);}
	| <CONST: "const"> {Analizador.lexico.println("PALABRA RESERVADA ----> " + image);}
	| <CONSTRUCTOR: "constructor"> {Analizador.lexico.println("PALABRA RESERVADA ----> " + image);}
	| <THIS: "this"> {Analizador.lexico.println("PALABRA RESERVADA ---->" + image);}
	| <CONSOLELOG: "console.log"> {Analizador.lexico.println("PALABRA RESERVADA ----> " + image);}
	| <TRY: "try"> {Analizador.lexico.println("PALABRA RESERVADA ----> " + image);}
	| <CATCH: "catch"> {Analizador.lexico.println("PALABRA RESERVADA ----> " + image);}
	| <FINALLY: "finally"> {Analizador.lexico.println("PALABRA RESERVADA ----> " + image);}
	| <THROW: "throw"> {Analizador.lexico.println("PALABRA RESERVADA ---->" + image);}
	| <FUNCTION: "function"> {Analizador.lexico.println("PALABRA RESERVADA ----> " + image);}
}

/**	POO */
TOKEN:  {
	<CLASS:  "class"> {Analizador.lexico.println("PALABRA RESERVADA ----> " + image);}
	| <EXTENDS: "extends"> {Analizador.lexico.println("PALABRA RESERVADA ----> " + image);}
	| <INTERFACE: "interface"> {Analizador.lexico.println("PALABRA RESERVADA ----> " + image);}
	| <IMPLEMENTS: "implements"> {Analizador.lexico.println("PALABRA RESERVADA ----> " + image);}
}

/** MODIFICADORES DE ACCESO */
TOKEN: {
	<PUBLIC: "public"> {Analizador.lexico.println("PALABRA RESERVADA ----> " + image);}
	| <PRIVATE: "private"> {Analizador.lexico.println("PALABRA RESERVADA ----> " + image);}
	| <PROTECTED: "protected"> {Analizador.lexico.println("PALABRA RESERVADA ----> " + image);}
}

/**TIPOS DE DATOS*/
TOKEN: {
	<BOOLEAN: "boolean"> {Analizador.lexico.println("TIPO DE DATO ----> " + image);}
	| <ENTERO:  "number"> {Analizador.lexico.println("TIPO DE DATO ----> " + image);}
	| <STRING: "string"> {Analizador.lexico.println("TIPO DE DATO ----> " + image);}
	| <ANY: "any"> {Analizador.lexico.println("TIPO DE DATO ----> " + image);}
	| <VOID: "void"> {Analizador.lexico.println("TIPO DE DATO ----> " + image);}
	| <ARRAY: "Array"> {Analizador.lexico.println("TIPO DE DATO ----> " + image);}
	| <UNDEFINED: "undefined"> {Analizador.lexico.println("TIPO DE DATO ----> " + image);}
	| <NULL: "null"> {Analizador.lexico.println("TIPO DE DATO ----> " + image);}
	| <ENUM: "enum"> {Analizador.lexico.println("TIPO DE DATO ----> " + image);}
	| <OBJECT: "object"> {Analizador.lexico.println("TIPO DE DATO ----> " + image);}
}

/**OPERADORES LOGICOS Y ARITMETICOS*/
TOKEN: {
	<SUMA:  "+"> {Analizador.lexico.println("OPERADOR ARITMETICO ----> " + image);}
	| <RESTA:  "-"> {Analizador.lexico.println("OPERADOR ARITMETICO ----> " + image);}
	| <MULTIPLIC:  "*"> {Analizador.lexico.println("OPERADOR ARITMETICO ----> " + image);}
	| <DIVIS:  "/"> {Analizador.lexico.println("OPERADOR ARITMETICO ----> " + image);}
	| <MODULO:  "%"> {Analizador.lexico.println("OPERADOR ARITMETICO ----> " + image);}
	| <INCREMENTAR:  "++"> {Analizador.lexico.println("OPERADOR ARITMETICO ----> " + image);}
	| <DECREMENTAR:  "--"> {Analizador.lexico.println("OPERADOR ARITMETICO ----> " + image);}
	| <AND:  "&&"> {Analizador.lexico.println("OPERADOR LOGICO ----> " + image);}
	| <OR:  "||"> {Analizador.lexico.println("OPERADOR LOGICO ----> " + image);}
}

/**DELIMITADORES Y OPERADORES COMPARATIVOS*/
TOKEN: {
	<PARENT_IZQ: "("> {Analizador.lexico.println("ABRIR PARENTESIS ----> " + image);}
	| <PARENT_DER: ")"> {Analizador.lexico.println("CERRAR PARENTESIS ----> " + image);}
	| <LLAVE_IZQ: "{"> {Analizador.lexico.println("ABRIR LLAVE ----> " + image);}
	| <LLAVE_DER: "}"> {Analizador.lexico.println("CERRAR LLAVE ----> " + image);}
	| <CORCH_IZQ: "["> {Analizador.lexico.println("ABRIR CORCHETES ----> " + image);}
	| <CORCH_DER: "]"> {Analizador.lexico.println("CERRAR CORCHETES ----> " + image);}
	| <PUNTO_COMA: ";"> {Analizador.lexico.println("PUNTO Y COMA ----> " + image);}
	| <DOS_PUNTOS: ":"> {Analizador.lexico.println("DOS PUNTOS ----> " + image);}
	| <PUNTO: "."> {Analizador.lexico.println("PUNTO ----> " + image);}
	| <COMA: ","> {Analizador.lexico.println("COMA ----> " + image);}
	| <ASIGNACION:  "="> {Analizador.lexico.println("OPERADOR ASIGNACION ----> " + image);}
	| <IGUAL: "=="> {Analizador.lexico.println("OPERADOR RELACIONAL ----> " + image);}
	| <MAYOR: ">"> {Analizador.lexico.println("OPERADOR RELACIONAL ----> " + image);}
	| <MENOR: "<"> {Analizador.lexico.println("OPERADOR RELACIONAL ----> " + image);}
	| <MAYOR_IGUAL: ">="> {Analizador.lexico.println("OPERADOR RELACIONAL ----> " + image);}
	| <MENOR_IGUAL: "<="> {Analizador.lexico.println("OPERADOR RELACIONAL ----> " + image);}
	| <DIF_QUE:  "!="> {Analizador.lexico.println("OPERADOR RELACIONAL ----> " + image);}
}

/**ESTRUCTURAS CICLICAS Y CONDICIONALES*/
TOKEN: {
	<IF: "if"> {Analizador.lexico.println("SETENCIA IF CONDICIONAL ----> " + image);}
	| <ELSE: "else"> {Analizador.lexico.println("SETENCIA ELSE CONDICIONAL ----> " + image);}
	| <FOR: "for"> {Analizador.lexico.println("SETENCIA FOR CICLO ----> " + image);}
	| <FOREACH: "foreach"> {Analizador.lexico.println("SETENCIA FOREACH CICLO ----> " + image);}
	| <DO: "do"> {Analizador.lexico.println("SETENCIA DO CICLO ----> " + image);}
	| <WHILE: "while"> {Analizador.lexico.println("SETENCIA WHILE CICLO ----> " + image);}
	| <CONTINUE: "continue"> {Analizador.lexico.println("SETENCIA CONTINUE ----> " + image);}
	| <SWITCH: "switch">{Analizador.lexico.println("SETENCIA SWITCH CONDICIONAL ----> " + image);}
	| <CASE: "case"> {Analizador.lexico.println("SETENCIA CASE ----> " + image);}
	| <BREAK: "break"> {Analizador.lexico.println("SETENCIA BREAK ----> " + image);}
	| <DEFAUL: "default"> {Analizador.lexico.println("SETENCIA DEFAULT ----> " + image);}
}

/**NUMEROS Y CADENAS*/
TOKEN: {
   	<NUMERO: (["0"-"9"])+ > {Analizador.lexico.println("NUMERO ----> " + image);}
   	| <NUMERO_DECIMAL: (["0"-"9"])+ "." (["0"-"9"])* > {Analizador.lexico.println("NUMERO DECIMAL ----> " + image);}
   	| <COMILLAS: "\"" > {Analizador.lexico.println("COMILLAS ----> " + image);}
   	| <IDENTIFICADOR: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])* > {Analizador.lexico.println("IDENTIFICADOR----> " + image);}
   	| <CADENA: <COMILLAS> ["a"-"z","A"-"Z","0"-"9"," "]
   		((["a"-"z","A"-"Z","0"-"9"," ",":",";",".","�"])
   		|("�")|("?")|("#")|("+")|("-")|("*")|("~")|("%")|("=")|("{")|("}")|("/")|("!")|("�")
		|("<")|(">"))*<COMILLAS>> {Analizador.lexico.println("CADENA ----> " + image);}
   	| <CARACTER: <COMILLAS>["a"-"z","A"-"Z","0"-"9"]<COMILLAS>> {Analizador.lexico.println("CARACTER ----> " + image);}
   	| <BOOLEANO: "true" | "false">  {Analizador.lexico.println("BOOLEANO ----> " + image);}
}

/**ERRORES QUE SALTA DEL ANALISIS LEXICO*/
SKIP: {
	" " | "\r" | "\t" | "\n"
}

//OPERADORES ARITMETICOS
void operadoresAritmeticos() : {} {
	<SUMA> | <RESTA> | <MULTIPLIC> | <DIVIS> | <MODULO>
}

//OPERADORES DE PRE - INCREMENTO, DECREMENTO, POST - INCREMENTO, DECREMENTO
void operadoresPostPreIncDecremento() : {} {
	(<DECREMENTAR> | <INCREMENTAR>) <IDENTIFICADOR> | <IDENTIFICADOR> (<DECREMENTAR> | <INCREMENTAR>)
}

//OPERADORES RELACIONALES
void operadoresRelacionales() : {} {
	<IGUAL> | <MAYOR> | <MENOR> | <MAYOR_IGUAL> | <MENOR_IGUAL> | <DIF_QUE>
}

//OPERADORES LOGICOS
void operadoresLogicos() : {} {
	<AND> | <OR>
}

//TIPOS DE DATO
void tipoDato() : {} {
	<BOOLEAN> | <ENTERO> | <STRING> | <ANY> | <VOID> | <ARRAY> | <UNDEFINED> | <NULL>
	| <ENUM> | <OBJECT>
}

// LLAVE DERECHA
void llaveDerecha(int codigoError) : {} {
	try {
		<LLAVE_DER>
	} catch(ParseException ex) {
		cantidadErrores++;
		
		switch(codigoError) {
			case 0:
				mensajesError += "Error sintactico en la linea: " 
									+ ex.currentToken.beginLine + " Columna: " + ex.currentToken.beginColumn 
									+ ". Falta cerrar la Llave derecha '}' de la FUNCION\n";
			break;

			case 1:
				mensajesError += "Error sintactico en la linea: " 
									+ ex.currentToken.beginLine + " Columna: " + ex.currentToken.beginColumn 
									+ ". Falta cerrar la Llave derecha '}' de la CLASE\n";
			break;

			case 2:
				mensajesError += "Error sintactico en la linea: " 
									+ ex.currentToken.beginLine + " Columna: " + ex.currentToken.beginColumn 
									+ ". Falta cerrar la Llave derecha '}' del CONDICIONAL IF\n";
			break;

			case 3:
				mensajesError += "Error sintactico en la linea: " 
									+ ex.currentToken.beginLine + " Columna: " + ex.currentToken.beginColumn 
									+ ". Falta cerrar la Llave derecha '}' de CONDICIONAL ELSE\n";
			break;

			case 4:
				mensajesError += "Error sintactico en la linea: " 
									+ ex.currentToken.beginLine + " Columna: " + ex.currentToken.beginColumn 
									+ ". Falta cerrar la Llave derecha '}' de CONDICIONAL SWITCH\n";
			break;

			case 5:
				mensajesError += "Error sintactico en la linea: " 
									+ ex.currentToken.beginLine + " Columna: " + ex.currentToken.beginColumn 
									+ ". Falta cerrar la Llave derecha '}' del CICLO FOR\n";
			break;

			case 6:
				mensajesError += "Error sintactico en la linea: " 
									+ ex.currentToken.beginLine + " Columna: " + ex.currentToken.beginColumn 
									+ ". Falta cerrar la Llave derecha del CONDICIONAL WHILE\n"; 
			break;

			case 7:
				mensajesError += "Error sintactico en la linea: " 
									+ ex.currentToken.beginLine + " Columna: " + ex.currentToken.beginColumn 
									+ ". Falta cerrar la Llave derecha del CICLO DO\n";
			break;
		}
	}
}

void puntoComa(int codigoError) : {} {
	try {
		<PUNTO_COMA>
	} catch(ParseException ex){
		cantidadErrores++;

		switch(codigoError) {
			case 0:
				mensajesError += "Error sintactico en la linea: " 
									+ ex.currentToken.beginLine + " Columna: " + ex.currentToken.beginColumn 
									+ ". Falta el punto y coma ';' en la DECLARACION DE VARIABLE\n";
			break;

			case 1:
				mensajesError += "Error sintactico en la linea: " 
									+ ex.currentToken.beginLine + " Columna: " + ex.currentToken.beginColumn 
									+ ". Falta el punto y coma ';' en la ASIGNACION DE VARIABLE\n";
			break;

			case 2:
				mensajesError += "Error sintactico en la linea: " 
									+ ex.currentToken.beginLine + " Columna: " + ex.currentToken.beginColumn 
									+ ". Falta el punto y coma ';' en la SENTENCIA BREAK\n";
			break;

			case 3:
				mensajesError += "Error sintactico en la linea: " 
									+ ex.currentToken.beginLine + " Columna: " + ex.currentToken.beginColumn 
									+ ". Falta el punto y coma ';' en la SENTENCIA CONTINUE\n";
			break;

			case 4:
				mensajesError += "Error sintactico en la linea: " 
									+ ex.currentToken.beginLine + " Columna: " + ex.currentToken.beginColumn 
									+ ". Falta el punto y coma ';' en la SENTENCIA DO WHILE\n";
			break;
		}
	}
}

void declaracion() : {} {
	try {
		(<LET> | <VAR>) <IDENTIFICADOR> (<DOS_PUNTOS> tipoDato())* puntoComa(0)
	} catch(ParseException ex){
		Token token;
		cantidadErrores++;

		mensajesError += "Error sintactico en la linea: " 
							+ ex.currentToken.beginLine + " Columna: " + ex.currentToken.beginColumn
							+ ". Hubo un error en la estructura de la declaracion de variables\n";
		
		do{
			token = getNextToken();
		} while(token.kind != EOF && token.kind != PUNTO_COMA);
	}
}

void programa() : {
	mensajesError = "";
} {
	try {
		(declaracion())*
	} catch(ParseException ex) {
		Token token;
		cantidadErrores++;
		
		mensajesError += "Error sintactico en la linea: " 
							+ ex.currentToken.beginLine + " Columna: " + ex.currentToken.beginColumn 
							+ ". Hubo un error en la estructura del PROGRAMA.\n";

		do {
			token = getNextToken();
		} while(token.kind != EOF && token.kind != LLAVE_DER);
	}	
}